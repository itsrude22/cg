#include <graphics.h>

void reflectObject(int x[], int y[], int n, bool reflectX, bool reflectY) {
    for (int i = 0; i < n; i++) {
        if (reflectX) {
            y[i] = -y[i];
        }
        if (reflectY) {
            x[i] = -x[i];
        }
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int n;  // Number of vertices
    bool reflectX, reflectY;

    std::cout << "Enter the number of vertices: ";
    std::cin >> n;

    int x[n], y[n];  // Array to store x and y coordinates of vertices

    std::cout << "Enter the coordinates of the vertices:\n";
    for (int i = 0; i < n; i++) {
        std::cout << "Vertex " << (i + 1) << " (x, y): ";
        std::cin >> x[i] >> y[i];
    }

    std::cout << "Reflect the object with respect to the x-axis? (1 for Yes, 0 for No): ";
    std::cin >> reflectX;
    std::cout << "Reflect the object with respect to the y-axis? (1 for Yes, 0 for No): ";
    std::cin >> reflectY;

    reflectObject(x, y, n, reflectX, reflectY);

    // Draw the original object
    setcolor(WHITE);
    drawpoly(n, x, y);

    // Draw the reflected object
    setcolor(YELLOW);
    drawpoly(n, x, y);

    delay(5000);
    closegraph();

    return 0;
}
